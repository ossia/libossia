#N canvas 149 22 949 856 10;
#X msg 125 587 expose oscquery;
#X msg 113 557 expose;
#X text 30 589 for example;
#X text 168 556 (click to get help in Pd's console);
#N canvas 150 42 356 200 some_nodes 0;
#X obj 109 61 ossia.param dummy;
#X obj 109 81 ossia.param foo;
#X obj 109 101 ossia.param bar;
#N canvas 148 265 358 226 model 0;
#X obj 101 109 ossia.model fruh;
#X obj 102 164 ossia.param stuck;
#X text 18 137 Here \, the stuck parameter is placed under the fruh
node;
#X text 20 22 The [ossia.model] object allows to nest (or group) parameters
under a sub-node This can be done recursively with sub-models in further
sub-patchers, f 53;
#X restore 109 152 pd model;
#X text 36 25 see [ossia.param] help for more info and options;
#X restore 427 183 pd some_nodes;
#X msg 63 310 namespace;
#X msg 164 366 name;
#X obj 63 438 print;
#X obj 63 418 route namespace name;
#X symbolatom 121 471 15 0 0 2 name - -, f 15;
#X obj 121 439 symbol;
#X msg 98 338 name funny_name;
#X msg 153 617 expose oscquery 1234 9876;
#X obj 112 653 ø;
#X obj 63 396 ossia;
#X text 202 366 or retrieved;
#X text 29 19 ossia-pd is the implementation of libossia for pd - several
other implementations of libossia are available for various environments
\, such as openFrameworks \, C'74's Max \, python \, Qt \, plain C
\, etc... for more info \, see: https://ossia.github.io, f 121;
#X text 27 185 Look into that subpatch to see how nodes are declared:
;
#X text 220 336 its name can also be changed;
#X text 474 415 NB: all ossia-pd objects can indifferently be named:
;
#X text 613 437 [ossia.theNameOftheObject];
#X text 614 457 [ø.theNameOftheObject];
#X text 27 280 The ossia object allows to manage this general device
, f 100;
#X text 26 213 ________________________________________________________________________________________________________________
, f 122;
#X text 25 151 ________________________________________________________________________________________________________________
, f 122;
#X text 31 496 ________________________________________________________________________________________________________________
, f 122;
#X text 32 530 The global namespace can be exposed over the network
:;
#X text 252 581 will use oscquery protocol and default ports (OSC port
9999 and WS port 5678).;
#X text 344 610 will use oscquery protocol with OSC port 1234 and WS
port 9876, f 31;
#X text 28 101 This tree-based architecture (coined "device" in the
OSSIA terminology) can then be exposed under several protocols \, some
of which allow this architecture \, and the properties and values of
its nodes \, to be explored and queried. For now \, protocols available
in pd are plain OSC \, OSCquery \, and Minuit - more are to come,
f 122;
#X text 27 244 All the nodes (models & params \, see subpatch above)
in pd that haven't been explicitly registered under an [ossia.device]
object \, are automatically declared under a general device, f 100
;
#X text 28 64 libossia allows to declare the architecture of a patcher's
functions as a tree of nodes and parameters. These nodes/parameters
can have attributes \, which allow to declare some of their properties
\, such as their values \, types \, units \, ranges \, etc..., f 129
;
#X text 31 740 When exposed via OSCquery \, one can query the namespace
and properties from a web browser \, e.g. http://localhost:5678 if
you used the default ports More queries are possible in this way \,
e.g. http://localhost:5678/foo or http://localhost:5678/foo?VALUE,
f 116;
#X text 145 310 allows to get the namespace \, i.e. the list of the
addresses registered to the global device., f 96;
#X text 27 783 ________________________________________________________________________________________________________________
, f 122;
#X text 30 815 Please report bugs on: https://github.com/ossia/libossia/issues
, f 84;
#N canvas 0 22 361 184 presets 0;
#X obj 196 126 outlet;
#X obj 52 60 savepanel;
#X obj 53 36 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X msg 51 85 preset save \$1.json;
#X obj 318 36 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 222 59 openpanel;
#X msg 222 84 preset load \$1;
#X text 77 35 <- save presets or recall them ->;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X restore 165 392 pd presets;
#X text 251 392 preset management in here;
#X msg 162 658 get protocols;
#X msg 168 685 stop 0;
#X text 276 658 get a list of all protocols this device is exposed
through;
#X text 232 687 stop exposing this device (if it's the only exposed
once);
#X connect 0 0 13 0;
#X connect 1 0 13 0;
#X connect 5 0 14 0;
#X connect 6 0 14 0;
#X connect 8 0 7 0;
#X connect 8 1 10 0;
#X connect 10 0 9 0;
#X connect 11 0 14 0;
#X connect 12 0 13 0;
#X connect 14 0 8 0;
#X connect 36 0 14 0;
#X connect 38 0 13 0;
